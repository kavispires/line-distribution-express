{"version":3,"sources":["images/ld-express-logo.svg","images/ld-express-logo-negative.svg","serviceWorker.js","utils/constants.js","utils/index.js","useGlobalState.js","components/Header.jsx","components/Home.jsx","components/CreateColorPalette.jsx","components/Create.jsx","components/Presets.jsx","components/DistributeCurrentAction.jsx","components/DistributeProgressBar.jsx","utils/classes.js","components/DistributeBoxes.jsx","components/DistributeLogPill.jsx","components/DistributeLog.jsx","components/Distribute.jsx","components/App.jsx","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","SCREENS","HOME","Symbol","PRESETS","CREATE","DISTRIBUTE","KEYS","getBackgroundColor","hex","luminance","backgroundColor","color","getBoxSize","groupSize","buildActiveGroup","groupId","group","groupsJson","members","length","reduce","acc","memberId","index","member","membersJson","_","find","colorsJson","o","name","id","key","duration","boxSize","generatePillId","lastNum","initialState","screen","palette","sortBy","hsb","presets","presetList","Object","entries","map","groupData","buildPresets","customPresets","activeGroup","keyMemberDict","activeBoxes","log","distributionTotal","useGlobalState","createGlobalState","Header","setScreen","goToPresets","useCallback","goToCreate","className","onClick","src","logo","alt","Home","CreateColorPalette","console","style","Create","Presets","setActiveGroup","setKeyMemberDict","activatePreset","event","target","newActiveGroup","values","buildKeyMemberDict","preset","DistributeCurrentAction","membersObj","boxId","startsWith","substring","extractMemberIdFromBox","sort","join","buildSentence","keys","DistributeProgressBar","percentage","width","Math","round","transition","toFixed","Pill","category","clonedFrom","this","DistributeBoxes","setActiveBoxes","setLog","useState","activeKeys","setActiveKeys","activateBox","s","Date","now","deactivateBox","previousTimeStamp","pills","previousState","handleBoxClick","parentNode","type","handleKeyDown","undefined","handleKeyUp","previousActiveKeys","useEffect","addEventListener","removeEventListener","onMouseDown","onMouseUp","Number","DistributeLogPill","pill","DistributeLog","setDistributionTotal","latestPill","activeG","value","updateMemberDuration","reverse","Distribute","handleReset","actvG","ScreenComponents","App","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.952d1273.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ld-express-logo.cee03cd6.svg\";","module.exports = __webpack_public_path__ + \"static/media/ld-express-logo-negative.41eb13f4.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const SCREENS = {\n  HOME: Symbol('SCREEN'),\n  PRESETS: Symbol('PRESETS'),\n  CREATE: Symbol('CREATE'),\n  DISTRIBUTE: Symbol('DISTRIBUTE'),\n};\n\nexport const KEYS = [\n  '1',\n  '2',\n  '3',\n  '4',\n  '5',\n  '6',\n  '7',\n  '8',\n  '9',\n  '0',\n  'q',\n  'w',\n  'e',\n  'r',\n  't',\n  'y',\n  'u',\n  'i',\n  'o',\n  'p',\n  'a',\n  's',\n  'd',\n  'f',\n  'g',\n  'h',\n  'j',\n  'k',\n  'l',\n  'z',\n  'x',\n  'c',\n  'v',\n  'b',\n  'n',\n  'm',\n];\n","import _ from 'lodash';\n\n// Database files\nimport colorsJson from '../database/colors.json';\nimport groupsJson from '../database/groups.json';\nimport membersJson from '../database/members.json';\n\n// Constants\nimport { KEYS } from './constants';\n\nexport const getBackgroundColor = (hex = '#585818', luminance = 100) => {\n  return {\n    backgroundColor: hex,\n    color: luminance > 55 ? '#000000' : '#FFFFFF',\n  };\n};\n\nexport const getForegroundColor = (hex = '#585818') => {\n  return {\n    color: hex,\n  };\n};\n\nexport const buildPresets = () => {\n  const presetList = Object.entries(groupsJson).map(([groupId, groupData]) => {\n    const members = groupData.members.map((memberId) => {\n      return { ...membersJson[memberId] };\n    });\n\n    return {\n      id: groupId,\n      name: groupData.name,\n      groupSize: members.length,\n      members,\n    };\n  });\n\n  return _.sortBy(presetList, [(o) => o.name]);\n};\n\nexport const buildKeyMemberDict = (activeGroup) => {\n  return Object.values(activeGroup.members).reduce((acc, member) => {\n    acc[member.key] = member.id;\n    return acc;\n  }, {});\n};\n\nconst getBoxSize = (groupSize) => {\n  if (groupSize <= 5) return groupSize;\n  if (groupSize <= 7) return 3;\n  if (groupSize <= 8) return 4;\n  if (groupSize <= 10) return 5;\n  if (groupSize <= 12) return 4;\n  if (groupSize <= 15) return 1;\n  if (groupSize <= 16) return 4;\n  return 5;\n};\n\nexport const buildActiveGroup = (groupId) => {\n  const group = groupsJson[groupId];\n  const groupSize = group.members.length;\n\n  const members = group.members.reduce((acc, memberId, index) => {\n    const member = membersJson[memberId];\n\n    const color = _.find(colorsJson, (o) => o.name === member.color);\n\n    acc[memberId] = {\n      ...member,\n      color,\n      id: memberId,\n      key: KEYS[index],\n      duration: 0,\n    };\n\n    return acc;\n  }, {});\n\n  return {\n    id: groupId,\n    ...group,\n    members,\n    groupSize,\n    boxSize: getBoxSize(groupSize),\n  };\n};\n\nexport const extractMemberIdFromBox = (boxId) => {\n  const prefix = 'box-id-';\n  return boxId.substring(prefix.length);\n};\n\nexport const generatePillId = (() => {\n  let lastNum = 0;\n\n  return () => {\n    lastNum++;\n    return `p${lastNum}`;\n  };\n})();\n\nexport const updateMemberDuration = (group, memberId, value) => ({\n  ...group,\n  members: {\n    ...group.members,\n    [memberId]: {\n      ...group.members[memberId],\n      duration: group.members[memberId].duration + value,\n    },\n  },\n});\n","import { createGlobalState } from 'react-hooks-global-state';\nimport _ from 'lodash';\n\n// Database files\nimport colorsJson from './database/colors.json';\n\nimport { buildPresets } from './utils';\nimport { SCREENS } from './utils/constants';\n\nconst initialState = {\n  screen: SCREENS.HOME,\n  palette: _.sortBy(colorsJson, [(o) => o.hsb[0], (o) => o.hsb[1]]),\n  presets: buildPresets(),\n  customPresets: [],\n  activeGroup: null,\n  keyMemberDict: {},\n  activeBoxes: {},\n  log: [],\n  distributionTotal: 0,\n};\n\nconst { useGlobalState } = createGlobalState(initialState);\n\nexport default useGlobalState;\n","import React, { useCallback } from 'react';\nimport logo from '../images/ld-express-logo.svg';\n\nimport useGlobalState from '../useGlobalState';\nimport { SCREENS } from '../utils/constants';\n\nfunction Header() {\n  const [screen, setScreen] = useGlobalState('screen');\n\n  const goToPresets = useCallback(() => {\n    if (screen !== SCREENS.PRESETS) {\n      setScreen(SCREENS.PRESETS);\n    }\n  }, [setScreen, screen]);\n\n  const goToCreate = useCallback(() => {\n    if (screen !== SCREENS.CREATE) {\n      setScreen(SCREENS.CREATE);\n    }\n  }, [setScreen, screen]);\n\n  return (\n    <header className=\"header\">\n      <button className=\"header__btn\" onClick={goToPresets}>\n        Presets\n      </button>\n      <img src={logo} className=\"header__logo\" alt=\"logo\" />\n      <button className=\"header__btn\" onClick={goToCreate}>\n        Create\n      </button>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport logo from '../images/ld-express-logo-negative.svg';\n\nfunction Home() {\n  return (\n    <main className=\"content home\">\n      <img src={logo} className=\"home__logo\" alt=\"logo\" />\n      <p>Select a preset or create a new set to start distributing</p>\n    </main>\n  );\n}\n\nexport default Home;\n","import React from 'react';\n\nimport useGlobalState from '../useGlobalState';\nimport { getBackgroundColor } from '../utils';\n\nfunction CreateColorPalette() {\n  // Global States\n  const [palette] = useGlobalState('palette');\n  console.log(palette);\n  return (\n    <main className=\"content create\">\n      <h3>Color Palette</h3>\n      <ul className=\"color-palette\">\n        {palette.map((color) => {\n          return (\n            <li\n              className=\"color\"\n              key={color.name}\n              style={getBackgroundColor(color.hex, color.hsb[2])}\n            >\n              <span className=\"color__name\">{color.name}</span>\n            </li>\n          );\n        })}\n      </ul>\n    </main>\n  );\n}\n\nexport default CreateColorPalette;\n","import React from 'react';\nimport CreateColorPalette from './CreateColorPalette';\n\nfunction Create() {\n  return (\n    <main className=\"content create\">\n      <h2>Create</h2>\n      <p>TBD</p>\n      <CreateColorPalette />\n    </main>\n  );\n}\n\nexport default Create;\n","import React, { useCallback } from 'react';\n\nimport useGlobalState from '../useGlobalState';\nimport { SCREENS } from '../utils/constants';\nimport { buildActiveGroup, buildKeyMemberDict } from '../utils';\n\nfunction Presets() {\n  // Global States\n  const [, setScreen] = useGlobalState('screen');\n  const [activeGroup, setActiveGroup] = useGlobalState('activeGroup');\n  const [, setKeyMemberDict] = useGlobalState('keyMemberDict');\n  const [presets] = useGlobalState('presets');\n  const [customPresets] = useGlobalState('customPresets');\n\n  const activatePreset = useCallback(\n    (event) => {\n      const { id } = event.target;\n      if (id && id !== activeGroup?.id) {\n        const newActiveGroup = buildActiveGroup(event.target.id);\n        setKeyMemberDict(buildKeyMemberDict(newActiveGroup));\n        setActiveGroup(newActiveGroup);\n        // TO-DO: perform reset action\n      }\n      setScreen(SCREENS.DISTRIBUTE);\n    },\n    [activeGroup, setScreen, setKeyMemberDict, setActiveGroup]\n  );\n\n  return (\n    <main className=\"content preset\">\n      <h2>Presets</h2>\n      <p>Select the group preset you want to use:</p>\n      <ul className=\"presets-list\">\n        {presets.map((preset) => {\n          return (\n            <li key={preset.id} className=\"preset-item\">\n              <button className=\"preset-button\" id={preset.id} onClick={activatePreset}>\n                {preset.name} ({preset.groupSize} members)\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n      <h3>Custom Presets</h3>\n\n      {customPresets.length > 0 ? (\n        <ul className=\"presets-list\">\n          {presets.map((preset) => {\n            return (\n              <li key={preset.id} className=\"ha\">\n                {preset.name} ({preset.groupSize})\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p>You have no custom presets saved on this browser.</p>\n      )}\n    </main>\n  );\n}\n\nexport default Presets;\n","import React from 'react';\n\nimport useGlobalState from '../useGlobalState';\nimport { extractMemberIdFromBox } from '../utils';\n\nconst buildSentence = (activeBoxes, membersObj) => {\n  const { length } = activeBoxes;\n\n  if (length === 0) return '-';\n\n  const members = activeBoxes\n    .map((boxId) => {\n      const memberId = boxId.startsWith('box-') ? extractMemberIdFromBox(boxId) : boxId;\n      return membersObj[memberId]?.name ?? 'Unknown';\n    })\n    .sort();\n\n  if (length === 1) {\n    return `${members[0]} is singing.`;\n  }\n\n  return `${members.join(', ')} are singing`;\n};\n\nfunction DistributeCurrentAction() {\n  // Global States\n  const [activeGroup] = useGlobalState('activeGroup');\n  const [activeBoxes] = useGlobalState('activeBoxes');\n\n  return (\n    <h3 className=\"current-action\">\n      {buildSentence(Object.keys(activeBoxes), activeGroup.members)}\n    </h3>\n  );\n}\n\nexport default DistributeCurrentAction;\n","import React from 'react';\n\nimport useGlobalState from '../useGlobalState';\nimport { getBackgroundColor } from '../utils';\n\nfunction DistributeProgressBar() {\n  // Global States\n  const [activeGroup] = useGlobalState('activeGroup');\n  const [distributionTotal] = useGlobalState('distributionTotal');\n\n  return (\n    <ul className=\"progress-bar\">\n      {Object.values(activeGroup.members).map((member) => {\n        const key = `bar-${member.id}`;\n        const percentage = member.duration > 0 ? (100 * member.duration) / distributionTotal : 0;\n        return (\n          <li\n            key={key}\n            className=\"bar\"\n            style={{\n              ...getBackgroundColor(member.color.hex, member.color.hsb[2]),\n              width: `${Math.round(percentage)}%`,\n              transition: 'width 0.5s',\n            }}\n          >\n            {percentage > 5 ? `${percentage.toFixed(1)}%` : ''}\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nexport default DistributeProgressBar;\n","import { generatePillId } from './index';\n\nexport class Pill {\n  constructor(memberId, duration, category = 'LINE', clonedFrom = null) {\n    this.id = generatePillId();\n    this.memberId = memberId;\n    this.duration = duration;\n    this.category = category;\n    this.clonedFrom = clonedFrom;\n  }\n}\n","import React, { useCallback, useEffect, useState } from 'react';\n\nimport useGlobalState from '../useGlobalState';\nimport { getBackgroundColor } from '../utils';\nimport { Pill } from '../utils/classes';\n\nfunction DistributeBoxes() {\n  // Global States\n  const [activeGroup] = useGlobalState('activeGroup');\n  const [activeBoxes, setActiveBoxes] = useGlobalState('activeBoxes');\n  const [keyMemberDict] = useGlobalState('keyMemberDict');\n  const [, setLog] = useGlobalState('log');\n  // Local States\n  const [activeKeys, setActiveKeys] = useState({});\n\n  const activateBox = useCallback(\n    (memberId) => {\n      setActiveBoxes((s) => ({ ...s, [memberId]: Date.now() }));\n    },\n    [setActiveBoxes]\n  );\n\n  const deactivateBox = useCallback(\n    (memberId) => {\n      const previousTimeStamp = activeBoxes[memberId];\n\n      const duration = Date.now() - previousTimeStamp;\n\n      setLog((pills) => [...pills, new Pill(memberId, duration)]);\n\n      setActiveBoxes((s) => {\n        const previousState = { ...s };\n        delete previousState[memberId];\n        return previousState;\n      });\n    },\n    [setActiveBoxes, activeBoxes, setLog]\n  );\n\n  // Add BoxClick functionality\n  const handleBoxClick = useCallback(\n    (event) => {\n      const id = event.target.id || event.target.parentNode.id;\n      if (event.type === 'mousedown') {\n        activateBox(id);\n      } else {\n        deactivateBox(id);\n      }\n    },\n    [activateBox, deactivateBox]\n  );\n\n  // Add KeyPress functionality\n  const handleKeyDown = useCallback(\n    ({ key }) => {\n      const memberId = keyMemberDict[key];\n\n      if (memberId && activeKeys[key] === undefined) {\n        setActiveKeys((s) => ({ ...s, [key]: true }));\n        activateBox(memberId);\n      }\n    },\n    [activeKeys, keyMemberDict, activateBox]\n  );\n\n  const handleKeyUp = useCallback(\n    ({ key }) => {\n      const memberId = keyMemberDict[key];\n\n      if (memberId && activeKeys[key]) {\n        setActiveKeys((s) => {\n          const previousActiveKeys = { ...s };\n          delete previousActiveKeys[key];\n          return previousActiveKeys;\n        });\n        deactivateBox(memberId);\n      }\n    },\n    [activeKeys, setActiveKeys, keyMemberDict, deactivateBox]\n  );\n\n  // Add Event Listeners on mount\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  });\n\n  return (\n    <ul className=\"boxes\">\n      {Object.values(activeGroup.members).map((member) => {\n        const key = `box-${member.id}`;\n        return (\n          <li\n            key={key}\n            id={`box-id-${member.id}`}\n            className={`box box--${activeGroup.boxSize}`}\n            style={getBackgroundColor(member.color.hex, member.color.hsb[2])}\n            onMouseDown={handleBoxClick}\n            onMouseUp={handleBoxClick}\n          >\n            <span className=\"box__key\">{member.key}</span>\n            <span className=\"box__name\">{member.name}</span>\n            <span className=\"box__duration\">{Number(member.duration / 1000).toFixed(1)}s</span>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nexport default DistributeBoxes;\n","import React from 'react';\n\nimport useGlobalState from '../useGlobalState';\nimport { getBackgroundColor } from '../utils';\n\nfunction DistributeLogPill({ pill }) {\n  // Global States\n  const [activeGroup] = useGlobalState('activeGroup');\n  const [log, setLog] = useGlobalState('log');\n\n  const member = activeGroup.members[pill.memberId];\n\n  return (\n    <li className=\"pill\" style={getBackgroundColor(member.color.hex, member.color.hsb[2])}>\n      <button className=\"pill__icon-button\">D</button>\n      <button className=\"pill__icon-button\">E</button>\n      <span className=\"pill__label\">\n        {member.name} <span className=\"pill__timestamp\">({pill.duration}ms)</span>\n      </span>\n      <button className=\"pill__icon-button\">T</button>\n    </li>\n  );\n}\n\nexport default DistributeLogPill;\n","import React, { useEffect } from 'react';\n\nimport useGlobalState from '../useGlobalState';\n\n// Components\nimport DistributeLogPill from './DistributeLogPill';\nimport { updateMemberDuration } from '../utils';\n\nfunction DistributeLog() {\n  // Global States\n  const [, setActiveGroup] = useGlobalState('activeGroup');\n  const [log] = useGlobalState('log');\n  const [, setDistributionTotal] = useGlobalState('distributionTotal');\n\n  // Calculate members durations whenever log changes\n  useEffect(() => {\n    const latestPill = log[log.length - 1] ?? {};\n\n    const { duration = 0, memberId } = latestPill;\n\n    if (memberId) {\n      setActiveGroup((activeG) => updateMemberDuration(activeG, memberId, duration));\n\n      // Add to total\n      setDistributionTotal((s) => s + duration);\n    }\n  }, [log, setActiveGroup, setDistributionTotal]);\n\n  return (\n    <ul className=\"log\">\n      {[...log].reverse().map((pill) => (\n        <DistributeLogPill pill={pill} key={pill.id} />\n      ))}\n    </ul>\n  );\n}\n\nexport default DistributeLog;\n","import React, { useCallback } from 'react';\n\nimport useGlobalState from '../useGlobalState';\n\n// Components\nimport DistributeCurrentAction from './DistributeCurrentAction';\nimport DistributeProgressBar from './DistributeProgressBar';\nimport DistributeBoxes from './DistributeBoxes';\nimport DistributeLog from './DistributeLog';\nimport { buildActiveGroup } from '../utils';\n\nfunction Distribute() {\n  // Global States\n  const [activeGroup, setActiveGroup] = useGlobalState('activeGroup');\n  const [, setLog] = useGlobalState('log');\n  const [, setDistributionTotal] = useGlobalState('distributionTotal');\n\n  const handleReset = useCallback(() => {\n    setLog([]);\n    setDistributionTotal(0);\n    setActiveGroup((actvG) => buildActiveGroup(actvG.id));\n  }, [setLog, setDistributionTotal, setActiveGroup]);\n\n  return (\n    <main className=\"content distribute\">\n      <h1>Distribute - {activeGroup.name}</h1>\n      <nav className=\"distribute-nav\">\n        <button className=\"distribute-nav__button\" onClick={handleReset}>\n          Reset\n        </button>\n        <button className=\"distribute-nav__button\">Results</button>\n      </nav>\n      <DistributeCurrentAction />\n      <DistributeProgressBar />\n      <DistributeBoxes />\n      <DistributeLog />\n    </main>\n  );\n}\n\nexport default Distribute;\n","import React from 'react';\n\nimport useGlobalState from '../useGlobalState';\nimport { SCREENS } from '../utils/constants';\n\nimport Header from './Header';\nimport Home from './Home';\nimport Create from './Create';\nimport Presets from './Presets';\nimport Distribute from './Distribute';\n\nconst ScreenComponents = {\n  [SCREENS.CREATE]: <Create />,\n  [SCREENS.DISTRIBUTE]: <Distribute />,\n  [SCREENS.HOME]: <Home />,\n  [SCREENS.PRESETS]: <Presets />,\n};\n\nfunction App() {\n  // Global States\n  const [screen] = useGlobalState('screen');\n\n  return (\n    <div className=\"container\">\n      <Header />\n      {ScreenComponents[screen]}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport './stylesheets/index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}